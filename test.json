{"swagger":"2.0","info":{"version":"1.0.0","title":"CodificationESP"},"basePath":"/api","paths":{"/Accounts/{id}/accessTokens/{fk}":{"get":{"tags":["Account"],"summary":"Find a related item by id for accessTokens.","operationId":"Account.prototype.__findById__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for accessTokens","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/AccessToken"}}},"deprecated":false},"delete":{"tags":["Account"],"summary":"Delete a related item by id for accessTokens.","operationId":"Account.prototype.__destroyById__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for accessTokens","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Account"],"summary":"Update a related item by id for accessTokens.","operationId":"Account.prototype.__updateById__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for accessTokens","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/AccessToken"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/AccessToken"}}},"deprecated":false}},"/Accounts/{id}/etudiants":{"get":{"tags":["Account"],"summary":"Fetches hasOne relation etudiants.","operationId":"Account.prototype.__get__etudiants","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"refresh","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"post":{"tags":["Account"],"summary":"Creates a new instance in etudiants of this model.","operationId":"Account.prototype.__create__etudiants","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"put":{"tags":["Account"],"summary":"Update etudiants of this model.","operationId":"Account.prototype.__update__etudiants","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"delete":{"tags":["Account"],"summary":"Deletes etudiants of this model.","operationId":"Account.prototype.__destroy__etudiants","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/{id}/reservation":{"get":{"tags":["Account"],"summary":"Fetches hasOne relation reservation.","operationId":"Account.prototype.__get__reservation","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"refresh","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false},"post":{"tags":["Account"],"summary":"Creates a new instance in reservation of this model.","operationId":"Account.prototype.__create__reservation","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Reservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false},"put":{"tags":["Account"],"summary":"Update reservation of this model.","operationId":"Account.prototype.__update__reservation","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Reservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false},"delete":{"tags":["Account"],"summary":"Deletes reservation of this model.","operationId":"Account.prototype.__destroy__reservation","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/{id}/accessTokens":{"get":{"tags":["Account"],"summary":"Queries accessTokens of Account.","operationId":"Account.prototype.__get__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/AccessToken"}}}},"deprecated":false},"post":{"tags":["Account"],"summary":"Creates a new instance in accessTokens of this model.","operationId":"Account.prototype.__create__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/AccessToken"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/AccessToken"}}},"deprecated":false},"delete":{"tags":["Account"],"summary":"Deletes all accessTokens of this model.","operationId":"Account.prototype.__delete__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/{id}/accessTokens/count":{"get":{"tags":["Account"],"summary":"Counts accessTokens of Account.","operationId":"Account.prototype.__count__accessTokens","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Accounts":{"post":{"tags":["Account"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Account.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false},"put":{"tags":["Account"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Account.upsert__put_Accounts","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false},"patch":{"tags":["Account"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Account.upsert__patch_Accounts","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false},"get":{"tags":["Account"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Account.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Account"}}}},"deprecated":false}},"/Accounts/replaceOrCreate":{"post":{"tags":["Account"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Account.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Accounts/upsertWithWhere":{"post":{"tags":["Account"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Account.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Accounts/{id}/exists":{"get":{"tags":["Account"],"summary":"Check whether a model instance exists in the data source.","operationId":"Account.exists__get_Accounts_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Accounts/{id}":{"head":{"tags":["Account"],"summary":"Check whether a model instance exists in the data source.","operationId":"Account.exists__head_Accounts_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Account"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Account.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false},"delete":{"tags":["Account"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Account.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Account"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Account.prototype.updateAttributes__put_Accounts_{id}","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false},"patch":{"tags":["Account"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Account.prototype.updateAttributes__patch_Accounts_{id}","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Accounts/{id}/replace":{"post":{"tags":["Account"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Account.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Accounts/findOne":{"get":{"tags":["Account"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Account.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Accounts/update":{"post":{"tags":["Account"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Account.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Account"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Accounts/count":{"get":{"tags":["Account"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Account.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Accounts/change-stream":{"post":{"tags":["Account"],"summary":"Create a change stream.","operationId":"Account.createChangeStream__post_Accounts_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Account"],"summary":"Create a change stream.","operationId":"Account.createChangeStream__get_Accounts_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Accounts/login":{"post":{"tags":["Account"],"summary":"Login a user with username/email and password.","operationId":"Account.login","parameters":[{"name":"credentials","in":"body","required":true,"schema":{"type":"object"}},{"name":"include","in":"query","description":"Related objects to include in the response. See the description of return value for more details.","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Le corps de réponse contient les propriétés de AccessToken créées lors de la connexion.\nEn fonction de la valeur du paramètre `include`, le corps peut contenir des propriétés supplémentaires :\n\n  - `user` - `U+007BUserU+007D` - Données de l'utilisateur connecté. (`include=user`)\n\n","type":"object"}}},"deprecated":false}},"/Accounts/logout":{"post":{"tags":["Account"],"summary":"Logout a user with access token.","operationId":"Account.logout","parameters":[],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/confirm":{"get":{"tags":["Account"],"summary":"Confirm a user registration with email verification token.","operationId":"Account.confirm","parameters":[{"name":"uid","in":"query","required":true,"type":"string"},{"name":"token","in":"query","required":true,"type":"string"},{"name":"redirect","in":"query","required":false,"type":"string"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/reset":{"post":{"tags":["Account"],"summary":"Reset password for a user with email.","operationId":"Account.resetPassword","parameters":[{"name":"options","in":"body","required":true,"schema":{"type":"object"}}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Accounts/{id}/batiments_Accesibles":{"get":{"tags":["Account"],"summary":"Donne l'ensemble des batiments accessibles pour l'étudiant","operationId":"Account.prototype.batimentsAccessibles","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"le tableau des batiments accessibles","type":"array","items":{"$ref":"#/definitions/x-any"}}}},"deprecated":false}},"/Accounts/{id}/etages_Accessibles":{"get":{"tags":["Account"],"summary":"Donne les etages qui sont accessibles dans un batiment donné","operationId":"Account.prototype.etagesAccessibles","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"batiment","in":"query","description":"L'id du batiment dans le quel on recherche des etages","required":true,"type":"string"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Le tableau des étages accessibles selon un batiment donné","type":"string"}}},"deprecated":false}},"/Accounts/{id}/couloirs_Accessibles":{"get":{"tags":["Account"],"summary":"Donne les couloirs qui sont accessibles pour un etage donné","operationId":"Account.prototype.couloirsAccessibles","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"etage","in":"query","description":"L'id de l'etage dans lequel on recherche des couloirs accessibles","required":true,"type":"string"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Le tableau des couloirs accessibles de l'étage","type":"string"}}},"deprecated":false}},"/Accounts/{id}/confirmer_Reservation":{"get":{"tags":["Account"],"summary":"Permet de confirmer une reservation","operationId":"Account.prototype.confirmerReservation","parameters":[{"name":"id","in":"path","description":"Account id","required":true,"type":"string","format":"JSON"},{"name":"code","in":"query","description":"","required":true,"type":"string"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"vérifier l'etat de la réservation","type":"boolean"}}},"deprecated":false}},"/Etudiants":{"post":{"tags":["Etudiant"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Etudiant.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"put":{"tags":["Etudiant"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Etudiant.upsert__put_Etudiants","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"patch":{"tags":["Etudiant"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Etudiant.upsert__patch_Etudiants","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"get":{"tags":["Etudiant"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Etudiant.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Etudiant"}}}},"deprecated":false}},"/Etudiants/replaceOrCreate":{"post":{"tags":["Etudiant"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Etudiant.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false}},"/Etudiants/upsertWithWhere":{"post":{"tags":["Etudiant"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Etudiant.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false}},"/Etudiants/{id}/exists":{"get":{"tags":["Etudiant"],"summary":"Check whether a model instance exists in the data source.","operationId":"Etudiant.exists__get_Etudiants_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Etudiants/{id}":{"head":{"tags":["Etudiant"],"summary":"Check whether a model instance exists in the data source.","operationId":"Etudiant.exists__head_Etudiants_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Etudiant"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Etudiant.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"delete":{"tags":["Etudiant"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Etudiant.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Etudiant"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Etudiant.prototype.updateAttributes__put_Etudiants_{id}","parameters":[{"name":"id","in":"path","description":"Etudiant id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false},"patch":{"tags":["Etudiant"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Etudiant.prototype.updateAttributes__patch_Etudiants_{id}","parameters":[{"name":"id","in":"path","description":"Etudiant id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false}},"/Etudiants/{id}/replace":{"post":{"tags":["Etudiant"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Etudiant.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false}},"/Etudiants/findOne":{"get":{"tags":["Etudiant"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Etudiant.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etudiant"}}},"deprecated":false}},"/Etudiants/update":{"post":{"tags":["Etudiant"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Etudiant.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etudiant"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Etudiants/count":{"get":{"tags":["Etudiant"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Etudiant.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Etudiants/change-stream":{"post":{"tags":["Etudiant"],"summary":"Create a change stream.","operationId":"Etudiant.createChangeStream__post_Etudiants_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Etudiant"],"summary":"Create a change stream.","operationId":"Etudiant.createChangeStream__get_Etudiants_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Batiments/{id}/etages/{fk}":{"get":{"tags":["Batiment"],"summary":"Find a related item by id for etages.","operationId":"Batiment.prototype.__findById__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for etages","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"delete":{"tags":["Batiment"],"summary":"Delete a related item by id for etages.","operationId":"Batiment.prototype.__destroyById__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for etages","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Batiment"],"summary":"Update a related item by id for etages.","operationId":"Batiment.prototype.__updateById__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for etages","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Batiments/{id}/contraintes/{fk}":{"get":{"tags":["Batiment"],"summary":"Find a related item by id for contraintes.","operationId":"Batiment.prototype.__findById__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Batiment"],"summary":"Delete a related item by id for contraintes.","operationId":"Batiment.prototype.__destroyById__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Batiment"],"summary":"Update a related item by id for contraintes.","operationId":"Batiment.prototype.__updateById__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Batiments/{id}/etages":{"get":{"tags":["Batiment"],"summary":"Queries etages of Batiment.","operationId":"Batiment.prototype.__get__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Etage"}}}},"deprecated":false},"post":{"tags":["Batiment"],"summary":"Creates a new instance in etages of this model.","operationId":"Batiment.prototype.__create__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"delete":{"tags":["Batiment"],"summary":"Deletes all etages of this model.","operationId":"Batiment.prototype.__delete__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Batiments/{id}/etages/count":{"get":{"tags":["Batiment"],"summary":"Counts etages of Batiment.","operationId":"Batiment.prototype.__count__etages","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Batiments/{id}/contraintes":{"get":{"tags":["Batiment"],"summary":"Queries contraintes of Batiment.","operationId":"Batiment.prototype.__get__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Contraintes"}}}},"deprecated":false},"post":{"tags":["Batiment"],"summary":"Creates a new instance in contraintes of this model.","operationId":"Batiment.prototype.__create__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Batiment"],"summary":"Deletes all contraintes of this model.","operationId":"Batiment.prototype.__delete__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Batiments/{id}/contraintes/count":{"get":{"tags":["Batiment"],"summary":"Counts contraintes of Batiment.","operationId":"Batiment.prototype.__count__contraintes","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Batiments":{"post":{"tags":["Batiment"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Batiment.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false},"put":{"tags":["Batiment"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Batiment.upsert__put_Batiments","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false},"patch":{"tags":["Batiment"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Batiment.upsert__patch_Batiments","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false},"get":{"tags":["Batiment"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Batiment.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Batiment"}}}},"deprecated":false}},"/Batiments/replaceOrCreate":{"post":{"tags":["Batiment"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Batiment.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false}},"/Batiments/upsertWithWhere":{"post":{"tags":["Batiment"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Batiment.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false}},"/Batiments/{id}/exists":{"get":{"tags":["Batiment"],"summary":"Check whether a model instance exists in the data source.","operationId":"Batiment.exists__get_Batiments_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Batiments/{id}":{"head":{"tags":["Batiment"],"summary":"Check whether a model instance exists in the data source.","operationId":"Batiment.exists__head_Batiments_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Batiment"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Batiment.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false},"delete":{"tags":["Batiment"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Batiment.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Batiment"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Batiment.prototype.updateAttributes__put_Batiments_{id}","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false},"patch":{"tags":["Batiment"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Batiment.prototype.updateAttributes__patch_Batiments_{id}","parameters":[{"name":"id","in":"path","description":"Batiment id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false}},"/Batiments/{id}/replace":{"post":{"tags":["Batiment"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Batiment.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false}},"/Batiments/findOne":{"get":{"tags":["Batiment"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Batiment.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Batiment"}}},"deprecated":false}},"/Batiments/update":{"post":{"tags":["Batiment"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Batiment.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Batiment"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Batiments/count":{"get":{"tags":["Batiment"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Batiment.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Batiments/change-stream":{"post":{"tags":["Batiment"],"summary":"Create a change stream.","operationId":"Batiment.createChangeStream__post_Batiments_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Batiment"],"summary":"Create a change stream.","operationId":"Batiment.createChangeStream__get_Batiments_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Etages/{id}/coulois/{fk}":{"get":{"tags":["Etage"],"summary":"Find a related item by id for coulois.","operationId":"Etage.prototype.__findById__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for coulois","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"delete":{"tags":["Etage"],"summary":"Delete a related item by id for coulois.","operationId":"Etage.prototype.__destroyById__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for coulois","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Etage"],"summary":"Update a related item by id for coulois.","operationId":"Etage.prototype.__updateById__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for coulois","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Etages/{id}/contraintes/{fk}":{"get":{"tags":["Etage"],"summary":"Find a related item by id for contraintes.","operationId":"Etage.prototype.__findById__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Etage"],"summary":"Delete a related item by id for contraintes.","operationId":"Etage.prototype.__destroyById__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Etage"],"summary":"Update a related item by id for contraintes.","operationId":"Etage.prototype.__updateById__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Etages/{id}/coulois":{"get":{"tags":["Etage"],"summary":"Queries coulois of Etage.","operationId":"Etage.prototype.__get__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Couloir"}}}},"deprecated":false},"post":{"tags":["Etage"],"summary":"Creates a new instance in coulois of this model.","operationId":"Etage.prototype.__create__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"delete":{"tags":["Etage"],"summary":"Deletes all coulois of this model.","operationId":"Etage.prototype.__delete__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Etages/{id}/coulois/count":{"get":{"tags":["Etage"],"summary":"Counts coulois of Etage.","operationId":"Etage.prototype.__count__coulois","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Etages/{id}/contraintes":{"get":{"tags":["Etage"],"summary":"Queries contraintes of Etage.","operationId":"Etage.prototype.__get__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Contraintes"}}}},"deprecated":false},"post":{"tags":["Etage"],"summary":"Creates a new instance in contraintes of this model.","operationId":"Etage.prototype.__create__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Etage"],"summary":"Deletes all contraintes of this model.","operationId":"Etage.prototype.__delete__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Etages/{id}/contraintes/count":{"get":{"tags":["Etage"],"summary":"Counts contraintes of Etage.","operationId":"Etage.prototype.__count__contraintes","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Etages":{"post":{"tags":["Etage"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Etage.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"put":{"tags":["Etage"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Etage.upsert__put_Etages","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"patch":{"tags":["Etage"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Etage.upsert__patch_Etages","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"get":{"tags":["Etage"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Etage.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Etage"}}}},"deprecated":false}},"/Etages/replaceOrCreate":{"post":{"tags":["Etage"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Etage.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Etages/upsertWithWhere":{"post":{"tags":["Etage"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Etage.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Etages/{id}/exists":{"get":{"tags":["Etage"],"summary":"Check whether a model instance exists in the data source.","operationId":"Etage.exists__get_Etages_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Etages/{id}":{"head":{"tags":["Etage"],"summary":"Check whether a model instance exists in the data source.","operationId":"Etage.exists__head_Etages_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Etage"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Etage.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"delete":{"tags":["Etage"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Etage.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Etage"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Etage.prototype.updateAttributes__put_Etages_{id}","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false},"patch":{"tags":["Etage"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Etage.prototype.updateAttributes__patch_Etages_{id}","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Etages/{id}/replace":{"post":{"tags":["Etage"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Etage.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Etages/findOne":{"get":{"tags":["Etage"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Etage.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Etage"}}},"deprecated":false}},"/Etages/update":{"post":{"tags":["Etage"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Etage.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Etage"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Etages/count":{"get":{"tags":["Etage"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Etage.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Etages/change-stream":{"post":{"tags":["Etage"],"summary":"Create a change stream.","operationId":"Etage.createChangeStream__post_Etages_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Etage"],"summary":"Create a change stream.","operationId":"Etage.createChangeStream__get_Etages_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Etages/{id}/reservations":{"get":{"tags":["Etage"],"summary":"renvoie l'ensembles des chambres et leurs positions occuppées","operationId":"Etage.prototype.reservations","parameters":[{"name":"id","in":"path","description":"Etage id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Le Tableau des chambres avec leurs positions occuppées ","type":"object"}}},"deprecated":false}},"/Couloirs/{id}/chambres/{fk}":{"get":{"tags":["Couloir"],"summary":"Find a related item by id for chambres.","operationId":"Couloir.prototype.__findById__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for chambres","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"delete":{"tags":["Couloir"],"summary":"Delete a related item by id for chambres.","operationId":"Couloir.prototype.__destroyById__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for chambres","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Couloir"],"summary":"Update a related item by id for chambres.","operationId":"Couloir.prototype.__updateById__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for chambres","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Couloirs/{id}/contraintes/{fk}":{"get":{"tags":["Couloir"],"summary":"Find a related item by id for contraintes.","operationId":"Couloir.prototype.__findById__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Couloir"],"summary":"Delete a related item by id for contraintes.","operationId":"Couloir.prototype.__destroyById__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Couloir"],"summary":"Update a related item by id for contraintes.","operationId":"Couloir.prototype.__updateById__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for contraintes","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Couloirs/{id}/chambres":{"get":{"tags":["Couloir"],"summary":"Queries chambres of Couloir.","operationId":"Couloir.prototype.__get__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Chambre"}}}},"deprecated":false},"post":{"tags":["Couloir"],"summary":"Creates a new instance in chambres of this model.","operationId":"Couloir.prototype.__create__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"delete":{"tags":["Couloir"],"summary":"Deletes all chambres of this model.","operationId":"Couloir.prototype.__delete__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Couloirs/{id}/chambres/count":{"get":{"tags":["Couloir"],"summary":"Counts chambres of Couloir.","operationId":"Couloir.prototype.__count__chambres","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Couloirs/{id}/contraintes":{"get":{"tags":["Couloir"],"summary":"Queries contraintes of Couloir.","operationId":"Couloir.prototype.__get__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Contraintes"}}}},"deprecated":false},"post":{"tags":["Couloir"],"summary":"Creates a new instance in contraintes of this model.","operationId":"Couloir.prototype.__create__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Couloir"],"summary":"Deletes all contraintes of this model.","operationId":"Couloir.prototype.__delete__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Couloirs/{id}/contraintes/count":{"get":{"tags":["Couloir"],"summary":"Counts contraintes of Couloir.","operationId":"Couloir.prototype.__count__contraintes","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Couloirs":{"post":{"tags":["Couloir"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Couloir.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"put":{"tags":["Couloir"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Couloir.upsert__put_Couloirs","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"patch":{"tags":["Couloir"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Couloir.upsert__patch_Couloirs","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"get":{"tags":["Couloir"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Couloir.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Couloir"}}}},"deprecated":false}},"/Couloirs/replaceOrCreate":{"post":{"tags":["Couloir"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Couloir.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Couloirs/upsertWithWhere":{"post":{"tags":["Couloir"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Couloir.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Couloirs/{id}/exists":{"get":{"tags":["Couloir"],"summary":"Check whether a model instance exists in the data source.","operationId":"Couloir.exists__get_Couloirs_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Couloirs/{id}":{"head":{"tags":["Couloir"],"summary":"Check whether a model instance exists in the data source.","operationId":"Couloir.exists__head_Couloirs_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Couloir"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Couloir.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"delete":{"tags":["Couloir"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Couloir.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Couloir"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Couloir.prototype.updateAttributes__put_Couloirs_{id}","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false},"patch":{"tags":["Couloir"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Couloir.prototype.updateAttributes__patch_Couloirs_{id}","parameters":[{"name":"id","in":"path","description":"Couloir id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Couloirs/{id}/replace":{"post":{"tags":["Couloir"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Couloir.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Couloirs/findOne":{"get":{"tags":["Couloir"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Couloir.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Couloir"}}},"deprecated":false}},"/Couloirs/update":{"post":{"tags":["Couloir"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Couloir.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Couloir"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Couloirs/count":{"get":{"tags":["Couloir"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Couloir.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Couloirs/change-stream":{"post":{"tags":["Couloir"],"summary":"Create a change stream.","operationId":"Couloir.createChangeStream__post_Couloirs_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Couloir"],"summary":"Create a change stream.","operationId":"Couloir.createChangeStream__get_Couloirs_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Chambres/{id}/reservations/{fk}":{"get":{"tags":["Chambre"],"summary":"Find a related item by id for reservations.","operationId":"Chambre.prototype.__findById__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for reservations","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false},"delete":{"tags":["Chambre"],"summary":"Delete a related item by id for reservations.","operationId":"Chambre.prototype.__destroyById__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for reservations","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false},"put":{"tags":["Chambre"],"summary":"Update a related item by id for reservations.","operationId":"Chambre.prototype.__updateById__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"fk","in":"path","description":"Foreign key for reservations","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Reservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false}},"/Chambres/{id}/reservations":{"get":{"tags":["Chambre"],"summary":"Queries reservations of Chambre.","operationId":"Chambre.prototype.__get__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Reservation"}}}},"deprecated":false},"post":{"tags":["Chambre"],"summary":"Creates a new instance in reservations of this model.","operationId":"Chambre.prototype.__create__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","required":false,"schema":{"$ref":"#/definitions/Reservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false},"delete":{"tags":["Chambre"],"summary":"Deletes all reservations of this model.","operationId":"Chambre.prototype.__delete__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"}],"responses":{"204":{"description":"Request was successful"}},"deprecated":false}},"/Chambres/{id}/reservations/count":{"get":{"tags":["Chambre"],"summary":"Counts reservations of Chambre.","operationId":"Chambre.prototype.__count__reservations","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Chambres":{"post":{"tags":["Chambre"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Chambre.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"put":{"tags":["Chambre"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Chambre.upsert__put_Chambres","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"patch":{"tags":["Chambre"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Chambre.upsert__patch_Chambres","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"get":{"tags":["Chambre"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Chambre.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Chambre"}}}},"deprecated":false}},"/Chambres/replaceOrCreate":{"post":{"tags":["Chambre"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Chambre.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Chambres/upsertWithWhere":{"post":{"tags":["Chambre"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Chambre.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Chambres/{id}/exists":{"get":{"tags":["Chambre"],"summary":"Check whether a model instance exists in the data source.","operationId":"Chambre.exists__get_Chambres_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Chambres/{id}":{"head":{"tags":["Chambre"],"summary":"Check whether a model instance exists in the data source.","operationId":"Chambre.exists__head_Chambres_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Chambre"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Chambre.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"delete":{"tags":["Chambre"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Chambre.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Chambre"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Chambre.prototype.updateAttributes__put_Chambres_{id}","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false},"patch":{"tags":["Chambre"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Chambre.prototype.updateAttributes__patch_Chambres_{id}","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Chambres/{id}/replace":{"post":{"tags":["Chambre"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Chambre.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Chambres/findOne":{"get":{"tags":["Chambre"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Chambre.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Chambres/update":{"post":{"tags":["Chambre"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Chambre.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Chambre"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Chambres/count":{"get":{"tags":["Chambre"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Chambre.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Chambres/change-stream":{"post":{"tags":["Chambre"],"summary":"Create a change stream.","operationId":"Chambre.createChangeStream__post_Chambres_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Chambre"],"summary":"Create a change stream.","operationId":"Chambre.createChangeStream__get_Chambres_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Chambres/{id}/reserverChambre":{"get":{"tags":["Chambre"],"summary":"Réserver une position dans une chambre donnee","operationId":"Chambre.prototype.reserver","parameters":[{"name":"id","in":"path","description":"Chambre id","required":true,"type":"string","format":"JSON"},{"name":"accountId","in":"query","description":"L'id du compte réservant une chambre","required":true,"type":"string"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"ok":{"description":"Vérifier si la réservation a réussi","type":"boolean"},"delai":{"type":"object"},"erreur":{"description":"Un code d'erreur durant la reservation","type":"string"}}}}},"deprecated":false}},"/Contraintes":{"post":{"tags":["Contraintes"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Contraintes.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"put":{"tags":["Contraintes"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Contraintes.upsert__put_Contraintes","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"patch":{"tags":["Contraintes"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Contraintes.upsert__patch_Contraintes","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"get":{"tags":["Contraintes"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Contraintes.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Contraintes"}}}},"deprecated":false}},"/Contraintes/replaceOrCreate":{"post":{"tags":["Contraintes"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Contraintes.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Contraintes/upsertWithWhere":{"post":{"tags":["Contraintes"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Contraintes.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Contraintes/{id}/exists":{"get":{"tags":["Contraintes"],"summary":"Check whether a model instance exists in the data source.","operationId":"Contraintes.exists__get_Contraintes_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Contraintes/{id}":{"head":{"tags":["Contraintes"],"summary":"Check whether a model instance exists in the data source.","operationId":"Contraintes.exists__head_Contraintes_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Contraintes"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Contraintes.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"delete":{"tags":["Contraintes"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Contraintes.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Contraintes"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Contraintes.prototype.updateAttributes__put_Contraintes_{id}","parameters":[{"name":"id","in":"path","description":"Contraintes id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false},"patch":{"tags":["Contraintes"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Contraintes.prototype.updateAttributes__patch_Contraintes_{id}","parameters":[{"name":"id","in":"path","description":"Contraintes id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Contraintes/{id}/replace":{"post":{"tags":["Contraintes"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Contraintes.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Contraintes/findOne":{"get":{"tags":["Contraintes"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Contraintes.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Contraintes"}}},"deprecated":false}},"/Contraintes/update":{"post":{"tags":["Contraintes"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Contraintes.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Contraintes"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Contraintes/count":{"get":{"tags":["Contraintes"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Contraintes.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Contraintes/change-stream":{"post":{"tags":["Contraintes"],"summary":"Create a change stream.","operationId":"Contraintes.createChangeStream__post_Contraintes_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Contraintes"],"summary":"Create a change stream.","operationId":"Contraintes.createChangeStream__get_Contraintes_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/CodeReservations":{"post":{"tags":["CodeReservation"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"CodeReservation.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false},"put":{"tags":["CodeReservation"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"CodeReservation.upsert__put_CodeReservations","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false},"patch":{"tags":["CodeReservation"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"CodeReservation.upsert__patch_CodeReservations","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false},"get":{"tags":["CodeReservation"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"CodeReservation.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/CodeReservation"}}}},"deprecated":false}},"/CodeReservations/replaceOrCreate":{"post":{"tags":["CodeReservation"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"CodeReservation.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false}},"/CodeReservations/upsertWithWhere":{"post":{"tags":["CodeReservation"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"CodeReservation.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false}},"/CodeReservations/{id}/exists":{"get":{"tags":["CodeReservation"],"summary":"Check whether a model instance exists in the data source.","operationId":"CodeReservation.exists__get_CodeReservations_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/CodeReservations/{id}":{"head":{"tags":["CodeReservation"],"summary":"Check whether a model instance exists in the data source.","operationId":"CodeReservation.exists__head_CodeReservations_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["CodeReservation"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"CodeReservation.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false},"delete":{"tags":["CodeReservation"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"CodeReservation.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["CodeReservation"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"CodeReservation.prototype.updateAttributes__put_CodeReservations_{id}","parameters":[{"name":"id","in":"path","description":"CodeReservation id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false},"patch":{"tags":["CodeReservation"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"CodeReservation.prototype.updateAttributes__patch_CodeReservations_{id}","parameters":[{"name":"id","in":"path","description":"CodeReservation id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false}},"/CodeReservations/{id}/replace":{"post":{"tags":["CodeReservation"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"CodeReservation.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false}},"/CodeReservations/findOne":{"get":{"tags":["CodeReservation"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"CodeReservation.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/CodeReservation"}}},"deprecated":false}},"/CodeReservations/update":{"post":{"tags":["CodeReservation"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"CodeReservation.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/CodeReservation"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/CodeReservations/count":{"get":{"tags":["CodeReservation"],"summary":"Count instances of the model matched by where from the data source.","operationId":"CodeReservation.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/CodeReservations/change-stream":{"post":{"tags":["CodeReservation"],"summary":"Create a change stream.","operationId":"CodeReservation.createChangeStream__post_CodeReservations_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["CodeReservation"],"summary":"Create a change stream.","operationId":"CodeReservation.createChangeStream__get_CodeReservations_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Reservations/{id}/account":{"get":{"tags":["Reservation"],"summary":"Fetches belongsTo relation account.","operationId":"Reservation.prototype.__get__account","parameters":[{"name":"id","in":"path","description":"Reservation id","required":true,"type":"string","format":"JSON"},{"name":"refresh","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Reservations/{id}/chambre":{"get":{"tags":["Reservation"],"summary":"Fetches belongsTo relation chambre.","operationId":"Reservation.prototype.__get__chambre","parameters":[{"name":"id","in":"path","description":"Reservation id","required":true,"type":"string","format":"JSON"},{"name":"refresh","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Chambre"}}},"deprecated":false}},"/Reservations/{id}":{"get":{"tags":["Reservation"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Reservation.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Reservation"}}},"deprecated":false}},"/Reservations":{"get":{"tags":["Reservation"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Reservation.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Reservation"}}}},"deprecated":false}},"/Reservations/count":{"get":{"tags":["Reservation"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Reservation.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/PeriodeCodifications":{"post":{"tags":["PeriodeCodification"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"PeriodeCodification.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false},"put":{"tags":["PeriodeCodification"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"PeriodeCodification.upsert__put_PeriodeCodifications","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false},"patch":{"tags":["PeriodeCodification"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"PeriodeCodification.upsert__patch_PeriodeCodifications","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false},"get":{"tags":["PeriodeCodification"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"PeriodeCodification.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/PeriodeCodification"}}}},"deprecated":false}},"/PeriodeCodifications/replaceOrCreate":{"post":{"tags":["PeriodeCodification"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"PeriodeCodification.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false}},"/PeriodeCodifications/upsertWithWhere":{"post":{"tags":["PeriodeCodification"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"PeriodeCodification.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false}},"/PeriodeCodifications/{id}/exists":{"get":{"tags":["PeriodeCodification"],"summary":"Check whether a model instance exists in the data source.","operationId":"PeriodeCodification.exists__get_PeriodeCodifications_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/PeriodeCodifications/{id}":{"head":{"tags":["PeriodeCodification"],"summary":"Check whether a model instance exists in the data source.","operationId":"PeriodeCodification.exists__head_PeriodeCodifications_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["PeriodeCodification"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"PeriodeCodification.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false},"delete":{"tags":["PeriodeCodification"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"PeriodeCodification.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["PeriodeCodification"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"PeriodeCodification.prototype.updateAttributes__put_PeriodeCodifications_{id}","parameters":[{"name":"id","in":"path","description":"PeriodeCodification id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false},"patch":{"tags":["PeriodeCodification"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"PeriodeCodification.prototype.updateAttributes__patch_PeriodeCodifications_{id}","parameters":[{"name":"id","in":"path","description":"PeriodeCodification id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false}},"/PeriodeCodifications/{id}/replace":{"post":{"tags":["PeriodeCodification"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"PeriodeCodification.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false}},"/PeriodeCodifications/findOne":{"get":{"tags":["PeriodeCodification"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"PeriodeCodification.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/PeriodeCodification"}}},"deprecated":false}},"/PeriodeCodifications/update":{"post":{"tags":["PeriodeCodification"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"PeriodeCodification.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/PeriodeCodification"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/PeriodeCodifications/count":{"get":{"tags":["PeriodeCodification"],"summary":"Count instances of the model matched by where from the data source.","operationId":"PeriodeCodification.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/PeriodeCodifications/change-stream":{"post":{"tags":["PeriodeCodification"],"summary":"Create a change stream.","operationId":"PeriodeCodification.createChangeStream__post_PeriodeCodifications_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["PeriodeCodification"],"summary":"Create a change stream.","operationId":"PeriodeCodification.createChangeStream__get_PeriodeCodifications_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Criteres":{"post":{"tags":["Critere"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Critere.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false},"put":{"tags":["Critere"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Critere.upsert__put_Criteres","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false},"patch":{"tags":["Critere"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Critere.upsert__patch_Criteres","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false},"get":{"tags":["Critere"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Critere.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Critere"}}}},"deprecated":false}},"/Criteres/replaceOrCreate":{"post":{"tags":["Critere"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Critere.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false}},"/Criteres/upsertWithWhere":{"post":{"tags":["Critere"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Critere.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false}},"/Criteres/{id}/exists":{"get":{"tags":["Critere"],"summary":"Check whether a model instance exists in the data source.","operationId":"Critere.exists__get_Criteres_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Criteres/{id}":{"head":{"tags":["Critere"],"summary":"Check whether a model instance exists in the data source.","operationId":"Critere.exists__head_Criteres_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Critere"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Critere.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false},"delete":{"tags":["Critere"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Critere.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Critere"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Critere.prototype.updateAttributes__put_Criteres_{id}","parameters":[{"name":"id","in":"path","description":"Critere id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false},"patch":{"tags":["Critere"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Critere.prototype.updateAttributes__patch_Criteres_{id}","parameters":[{"name":"id","in":"path","description":"Critere id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false}},"/Criteres/{id}/replace":{"post":{"tags":["Critere"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Critere.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false}},"/Criteres/findOne":{"get":{"tags":["Critere"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Critere.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Critere"}}},"deprecated":false}},"/Criteres/update":{"post":{"tags":["Critere"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Critere.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Critere"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Criteres/count":{"get":{"tags":["Critere"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Critere.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Criteres/change-stream":{"post":{"tags":["Critere"],"summary":"Create a change stream.","operationId":"Critere.createChangeStream__post_Criteres_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Critere"],"summary":"Create a change stream.","operationId":"Critere.createChangeStream__get_Criteres_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}},"/Echanges/{id}/account":{"get":{"tags":["Echange"],"summary":"Fetches belongsTo relation account.","operationId":"Echange.prototype.__get__account","parameters":[{"name":"id","in":"path","description":"Echange id","required":true,"type":"string","format":"JSON"},{"name":"refresh","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Account"}}},"deprecated":false}},"/Echanges":{"post":{"tags":["Echange"],"summary":"Create a new instance of the model and persist it into the data source.","operationId":"Echange.create","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false},"put":{"tags":["Echange"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Echange.upsert__put_Echanges","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false},"patch":{"tags":["Echange"],"summary":"Patch an existing model instance or insert a new one into the data source.","operationId":"Echange.upsert__patch_Echanges","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false},"get":{"tags":["Echange"],"summary":"Find all instances of the model matched by filter from the data source.","operationId":"Echange.find","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"array","items":{"$ref":"#/definitions/Echange"}}}},"deprecated":false}},"/Echanges/replaceOrCreate":{"post":{"tags":["Echange"],"summary":"Replace an existing model instance or insert a new one into the data source.","operationId":"Echange.replaceOrCreate","parameters":[{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false}},"/Echanges/upsertWithWhere":{"post":{"tags":["Echange"],"summary":"Update an existing model instance or insert a new one into the data source based on the where criteria.","operationId":"Echange.upsertWithWhere","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false}},"/Echanges/{id}/exists":{"get":{"tags":["Echange"],"summary":"Check whether a model instance exists in the data source.","operationId":"Echange.exists__get_Echanges_{id}_exists","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false}},"/Echanges/{id}":{"head":{"tags":["Echange"],"summary":"Check whether a model instance exists in the data source.","operationId":"Echange.exists__head_Echanges_{id}","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"exists":{"type":"boolean"}}}}},"deprecated":false},"get":{"tags":["Echange"],"summary":"Find a model instance by {{id}} from the data source.","operationId":"Echange.findById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"filter","in":"query","description":"Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false},"delete":{"tags":["Echange"],"summary":"Delete a model instance by {{id}} from the data source.","operationId":"Echange.deleteById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object"}}},"deprecated":false},"put":{"tags":["Echange"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Echange.prototype.updateAttributes__put_Echanges_{id}","parameters":[{"name":"id","in":"path","description":"Echange id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false},"patch":{"tags":["Echange"],"summary":"Patch attributes for a model instance and persist it into the data source.","operationId":"Echange.prototype.updateAttributes__patch_Echanges_{id}","parameters":[{"name":"id","in":"path","description":"Echange id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false}},"/Echanges/{id}/replace":{"post":{"tags":["Echange"],"summary":"Replace attributes for a model instance and persist it into the data source.","operationId":"Echange.replaceById","parameters":[{"name":"id","in":"path","description":"Model id","required":true,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"Model instance data","required":false,"schema":{"description":"Model instance data","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false}},"/Echanges/findOne":{"get":{"tags":["Echange"],"summary":"Find first instance of the model matched by filter from the data source.","operationId":"Echange.findOne","parameters":[{"name":"filter","in":"query","description":"Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"$ref":"#/definitions/Echange"}}},"deprecated":false}},"/Echanges/update":{"post":{"tags":["Echange"],"summary":"Update instances of the model matched by {{where}} from the data source.","operationId":"Echange.updateAll","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"},{"name":"data","in":"body","description":"An object of model property name/value pairs","required":false,"schema":{"description":"An object of model property name/value pairs","$ref":"#/definitions/Echange"}}],"responses":{"200":{"description":"Request was successful","schema":{"description":"Information related to the outcome of the operation","type":"object","properties":{"count":{"description":"The number of instances updated","type":"number","format":"double"}}}}},"deprecated":false}},"/Echanges/count":{"get":{"tags":["Echange"],"summary":"Count instances of the model matched by where from the data source.","operationId":"Echange.count","parameters":[{"name":"where","in":"query","description":"Criteria to match model instances","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"object","properties":{"count":{"type":"number","format":"double"}}}}},"deprecated":false}},"/Echanges/change-stream":{"post":{"tags":["Echange"],"summary":"Create a change stream.","operationId":"Echange.createChangeStream__post_Echanges_change-stream","parameters":[{"name":"options","in":"formData","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false},"get":{"tags":["Echange"],"summary":"Create a change stream.","operationId":"Echange.createChangeStream__get_Echanges_change-stream","parameters":[{"name":"options","in":"query","required":false,"type":"string","format":"JSON"}],"responses":{"200":{"description":"Request was successful","schema":{"type":"file"}}},"deprecated":false}}},"tags":[{"name":"Account"},{"name":"Etudiant"},{"name":"Batiment"},{"name":"Etage"},{"name":"Couloir"},{"name":"Chambre"},{"name":"Contraintes"},{"name":"CodeReservation"},{"name":"Reservation"},{"name":"PeriodeCodification"},{"name":"Critere"},{"name":"Echange"}],"consumes":["application/json","application/x-www-form-urlencoded","application/xml","text/xml"],"produces":["application/json","application/xml","text/xml","application/javascript","text/javascript"],"definitions":{"x-any":{"properties":{}},"AccessToken":{"properties":{"id":{"type":"string"},"ttl":{"default":1209600,"description":"time to live in seconds (2 weeks by default)","type":"number","format":"double"},"created":{"type":"string","format":"date-time"},"userId":{"$ref":"#/definitions/ObjectID"}},"required":["id"],"additionalProperties":false},"Etudiant":{"properties":{"numEtudiant":{"type":"string"},"prenom":{"type":"string"},"nom":{"type":"string"},"dateNaiss":{"type":"string","format":"date-time"},"villeNaiss":{"type":"string"},"numCIN":{"type":"string"},"departement":{"type":"string"},"formation":{"type":"string"},"niveau":{"type":"number","format":"double"},"id":{"$ref":"#/definitions/ObjectID"},"accountId":{"$ref":"#/definitions/ObjectID"}},"required":["numEtudiant","prenom","nom","dateNaiss","numCIN","departement","formation","niveau"],"additionalProperties":false},"Reservation":{"properties":{"datereserv":{"type":"string","format":"date-time"},"confirmation":{"default":false,"type":"boolean"},"position":{"type":"number","format":"double"},"id":{"$ref":"#/definitions/ObjectID"},"accountId":{"$ref":"#/definitions/ObjectID"},"chambreId":{"$ref":"#/definitions/ObjectID"}},"required":["datereserv","confirmation","position"],"additionalProperties":false},"Account":{"properties":{"realm":{"type":"string"},"username":{"type":"string"},"credentials":{"type":"object"},"challenges":{"type":"object"},"email":{"type":"string"},"emailVerified":{"type":"boolean"},"status":{"type":"string"},"created":{"type":"string","format":"date-time"},"lastUpdated":{"type":"string","format":"date-time"},"id":{"$ref":"#/definitions/ObjectID"}},"required":["email"],"additionalProperties":false},"Etage":{"properties":{"numetage":{"type":"number","format":"double"},"id":{"$ref":"#/definitions/ObjectID"},"batiment_fk":{"$ref":"#/definitions/ObjectID"}},"required":["numetage"],"additionalProperties":false},"Contraintes":{"properties":{"attribut":{"type":"string"},"valeur":{"type":"string"},"comparaison":{"type":"string"},"id":{"$ref":"#/definitions/ObjectID"},"batimentId":{"$ref":"#/definitions/ObjectID"},"etageId":{"$ref":"#/definitions/ObjectID"},"couloirId":{"$ref":"#/definitions/ObjectID"}},"required":["attribut","valeur","comparaison"],"additionalProperties":false},"Batiment":{"properties":{"nombatiment":{"type":"string"},"id":{"$ref":"#/definitions/ObjectID"}},"required":["nombatiment"],"additionalProperties":false},"Couloir":{"properties":{"nomcouloir":{"type":"string"},"id":{"$ref":"#/definitions/ObjectID"},"etageId":{"$ref":"#/definitions/ObjectID"}},"required":["nomcouloir"],"additionalProperties":false},"Chambre":{"properties":{"numchambre":{"type":"number","format":"double"},"nbremaxoccupants":{"type":"number","format":"double"},"id":{"$ref":"#/definitions/ObjectID"},"couloirId":{"$ref":"#/definitions/ObjectID"}},"required":["numchambre","nbremaxoccupants"],"additionalProperties":false},"CodeReservation":{"properties":{"idReservation":{"type":"number","format":"double"},"codeReservation":{"type":"string"},"id":{"$ref":"#/definitions/ObjectID"}},"required":["idReservation","codeReservation"],"additionalProperties":false},"PeriodeCodification":{"properties":{"datedebut":{"type":"string","format":"date-time"},"datefin":{"type":"string","format":"date-time"},"id":{"$ref":"#/definitions/ObjectID"}},"required":["datedebut","datefin"],"additionalProperties":false},"Critere":{"properties":{"nomcritere":{"type":"string"},"valeur":{"type":"string"},"id":{"$ref":"#/definitions/ObjectID"}},"required":["nomcritere","valeur"],"additionalProperties":false},"Echange":{"properties":{"id":{"$ref":"#/definitions/ObjectID"},"echageur_id":{"$ref":"#/definitions/ObjectID"}},"additionalProperties":false},"ObjectID":{"type":"string","pattern":"^[a-fA-F\\d]{24}$"}}}